// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import ReactSelect from "react-select";
import * as ReactSelect$RescriptPractice from "./ReactSelect.bs.js";
import * as ReactSelectMenu$RescriptPractice from "./ReactSelectMenu.bs.js";
import * as ReactSelectOption$RescriptPractice from "./ReactSelectOption.bs.js";

import './Select.css'
;

import 'flag-icon-css/css/flag-icon.min.css'
;

var apiURL = "https://gist.githubusercontent.com/rusty-key/659db3f4566df459bd59c8a53dc9f71f/raw/4127f9550ef063121c564025f6d27dceeb279623/counties.json";

function CountrySelect(Props) {
  var selectedCountryValue = Props.selectedCountryValue;
  var onChange = Props.onChange;
  var onError = Props.onError;
  var className = Props.className;
  var match = React.useState(function () {
        return [];
      });
  var setCountries = match[1];
  var countries = match[0];
  var listRef = React.useRef(null);
  var countryOption = selectedCountryValue !== undefined ? Caml_option.undefined_to_opt(countries.find(function (country) {
              return country.value === selectedCountryValue;
            })) : undefined;
  var scrollIntoItem = function (item) {
    var index = countries.findIndex(function (country) {
          return country.value === item;
        });
    return Belt_Option.forEach(Caml_option.nullable_to_opt(listRef.current), (function (listEl) {
                  return listEl.scrollToItem(index);
                }));
  };
  React.useEffect((function () {
          var __x = fetch(apiURL);
          var __x$1 = __x.then(function (prim) {
                return prim.json();
              });
          var __x$2 = __x$1.then(function (arrOfData) {
                var data = ReactSelect$RescriptPractice.countryOptions_decode(arrOfData);
                if (data.TAG === /* Ok */0) {
                  var data$1 = data._0;
                  Curry._1(setCountries, (function (param) {
                          return data$1;
                        }));
                } else {
                  Curry._1(onError, undefined);
                }
                return Promise.resolve(undefined);
              });
          __x$2.catch(function (param) {
                Curry._1(onError, undefined);
                return Promise.resolve(undefined);
              });
          
        }), [
        onError,
        setCountries
      ]);
  var getSelectedIndex = function (selectedValues) {
    if (selectedValues.length === 0) {
      return 0;
    }
    var selectedValue = Caml_array.get(selectedValues, 0);
    return countries.findIndex(function (country) {
                return country.value === selectedValue.value;
              });
  };
  var renderOption = function (optionProps) {
    return React.createElement(ReactSelectOption$RescriptPractice.make, {
                optionProps: optionProps,
                scrollIntoItem: scrollIntoItem
              });
  };
  var renderMenuList = function (menuProps) {
    return React.createElement(ReactSelectMenu$RescriptPractice.make, {
                menuProps: menuProps,
                listRef: listRef,
                getSelectedIndex: getSelectedIndex
              });
  };
  var tmp = {
    options: countries,
    onChange: (function (country) {
        return Curry._1(onChange, country !== undefined ? country.value : undefined);
      }),
    components: {
      Option: renderOption,
      MenuList: renderMenuList
    }
  };
  if (countryOption !== undefined) {
    tmp.value = Caml_option.valFromOption(countryOption);
  }
  if (className !== undefined) {
    tmp.className = Caml_option.valFromOption(className);
  }
  return React.createElement(ReactSelect, tmp);
}

var make = CountrySelect;

export {
  apiURL ,
  make ,
  
}
/*  Not a pure module */
